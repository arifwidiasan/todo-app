basePath: /v1
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Access:
    properties:
      access_owner:
        type: boolean
      activity_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: integer
    type: object
  model.Activity:
    properties:
      Tasks:
        items:
          $ref: '#/definitions/model.Task'
        type: array
      accesses:
        items:
          $ref: '#/definitions/model.Access'
        type: array
      activity_name:
        type: string
      archived:
        type: boolean
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.ActivityArchived:
    properties:
      messages:
        example: activity archived
        type: string
    type: object
  model.ActivityDeleted:
    properties:
      messages:
        example: activity deleted
        type: string
    type: object
  model.ActivityNotFound:
    properties:
      messages:
        example: activity not found
        type: string
    type: object
  model.ActivityRestored:
    properties:
      messages:
        example: activity is restored
        type: string
    type: object
  model.ActivityUpdated:
    properties:
      activity_name:
        example: Kegiatan 1
        type: string
      messages:
        example: activity edited
        type: string
    type: object
  model.AddYourself:
    properties:
      messages:
        example: can't add yourself
        type: string
    type: object
  model.CreateAccess:
    properties:
      username:
        example: arifwidiasan
        type: string
    type: object
  model.CreateActivity:
    properties:
      activity_name:
        example: Kegiatan 1
        type: string
    type: object
  model.CreateTask:
    properties:
      task_name:
        example: buat dokumentasi
        type: string
      task_priority:
        example: "1"
        type: string
    type: object
  model.CreateUser:
    properties:
      user_email:
        example: arifw.subagio17@gmail.com
        type: string
      user_pass:
        example: rahasia87
        type: string
      username:
        example: arifwidiasan
        type: string
    type: object
  model.FailCreateAccess:
    properties:
      messages:
        example: error insert access
        type: string
    type: object
  model.FailCreateActivity:
    properties:
      messages:
        example: error insert activity
        type: string
    type: object
  model.FailCreateTask:
    properties:
      messages:
        example: error insert task
        type: string
    type: object
  model.FailCreateUser:
    properties:
      messages:
        example: error insert user
        type: string
    type: object
  model.FailDeleteAccess:
    properties:
      messages:
        example: error delete because you're the owner or no access found
        type: string
    type: object
  model.FailUpdateActivity:
    properties:
      messages:
        example: no id found or no change
        type: string
    type: object
  model.FailUpdateTask:
    properties:
      messages:
        example: task not found or no change
        type: string
    type: object
  model.JWTNotFound:
    properties:
      messages:
        example: missing or malformed jwt
        type: string
    type: object
  model.ListAccess:
    properties:
      access_Owner:
        example: true
        type: boolean
      username:
        example: arifwidiasan
        type: string
    type: object
  model.LoginRequest:
    properties:
      password:
        example: rahasia87
        type: string
      username:
        example: arifwidiasan
        type: string
    type: object
  model.NoAccess:
    properties:
      messages:
        example: you have no access to this activity
        type: string
    type: object
  model.NoAccessOwner:
    properties:
      messages:
        example: you dont have access to this activity or not owner
        type: string
    type: object
  model.SuccessCreateAccess:
    properties:
      activity_name:
        example: Kegiatan 1
        type: string
      messages:
        example: success add another user to this activity
        type: string
      username:
        example: arifwidiasan
        type: string
    type: object
  model.SuccessCreateTask:
    properties:
      activity_name:
        example: Kegiatan 1
        type: string
      messages:
        example: success add task to this activity
        type: string
      task_name:
        example: buat dokumentasi
        type: string
    type: object
  model.SuccessDeleteAccess:
    properties:
      activity_name:
        example: Kegiatan 1
        type: string
      messages:
        example: success delete user to this activity
        type: string
      username:
        example: arifwidiasan
        type: string
    type: object
  model.SuccessLoginUser:
    properties:
      messages:
        example: success
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NTI3ODI1OTIsImlkIjoxLCJ1c2VybmFtZSI6ImFyaWZ3aWRpYXNhbiJ9.Cve64349wPdD4HALRWnLqTzH4ByN20SRT_Zw-Vmrrm4
        type: string
    type: object
  model.SuccessRemoveAccess:
    properties:
      activity_name:
        example: Kegiatan 1
        type: string
      messages:
        example: success delete access, you can't access this activity anymore
        type: string
    type: object
  model.Task:
    properties:
      activity_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      task_done:
        type: boolean
      task_name:
        type: string
      task_priority:
        type: string
      updatedAt:
        type: string
    type: object
  model.TaskCompleted:
    properties:
      messages:
        example: task completed
        type: string
      tasks:
        $ref: '#/definitions/model.Task'
    type: object
  model.TaskDeleted:
    properties:
      messages:
        example: task deleted
        type: string
    type: object
  model.TaskNotFound:
    properties:
      messages:
        example: task not found
        type: string
    type: object
  model.TaskUndo:
    properties:
      messages:
        example: success undo completed task
        type: string
      tasks:
        $ref: '#/definitions/model.Task'
    type: object
  model.TaskUpdated:
    properties:
      messages:
        example: success update task
        type: string
      tasks:
        $ref: '#/definitions/model.Task'
    type: object
  model.UserFound:
    properties:
      user_email:
        example: arifw.subagio17@gmail.com
        type: string
      user_pass:
        example: rahasia87
        type: string
      username:
        example: arifwidiasan
        type: string
    type: object
  model.UserNotFound:
    properties:
      messages:
        example: username not found
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Documentation of To-do List App API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: To-do List App API
  version: "2.0"
paths:
  /{username}:
    get:
      consumes:
      - application/json
      description: get a user information by username.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/model.UserFound'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.UserNotFound'
      summary: Get a User.
      tags:
      - User
  /{username}/activities:
    get:
      consumes:
      - application/json
      description: get all activity by user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.UserNotFound'
      summary: Get All Activity.
      tags:
      - Activity
    post:
      consumes:
      - application/json
      description: create new activity for user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: JSON
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/model.CreateActivity'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CreateActivity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.UserNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.FailCreateActivity'
      summary: Create New Activity.
      tags:
      - Activity
  /{username}/activities/{activity_name}:
    delete:
      consumes:
      - application/json
      description: Delete a activity by activity name.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ActivityDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccessOwner'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ActivityNotFound'
      summary: Delete a Activity.
      tags:
      - Activity
    get:
      consumes:
      - application/json
      description: get a activity by activity name.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ActivityNotFound'
      summary: Get a Activity.
      tags:
      - Activity
    put:
      consumes:
      - application/json
      description: update a activity by activity name.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: JSON
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/model.CreateActivity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ActivityUpdated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.FailUpdateActivity'
      summary: Update a Activity.
      tags:
      - Activity
  /{username}/activities/{activity_name}/archive:
    delete:
      consumes:
      - application/json
      description: restore a activity by activity name.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ActivityRestored'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccessOwner'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.FailUpdateActivity'
      summary: Restore a Activity.
      tags:
      - Activity
    put:
      consumes:
      - application/json
      description: archive a activity by activity name.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ActivityArchived'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccessOwner'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.FailUpdateActivity'
      summary: Archive a Activity.
      tags:
      - Activity
  /{username}/activities/{activity_name}/manage:
    delete:
      consumes:
      - application/json
      description: delete access another user to activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: JSON
        in: body
        name: access
        required: true
        schema:
          $ref: '#/definitions/model.CreateAccess'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessDeleteAccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccessOwner'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.FailDeleteAccess'
      summary: Delete Access Another User to Activity.
      tags:
      - Access
    get:
      consumes:
      - application/json
      description: get list access user to activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListAccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccessOwner'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ActivityNotFound'
      summary: Get List Access User to Activity.
      tags:
      - Access
    post:
      consumes:
      - application/json
      description: add access user to activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: JSON
        in: body
        name: access
        required: true
        schema:
          $ref: '#/definitions/model.CreateAccess'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SuccessCreateAccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AddYourself'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccessOwner'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ActivityNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.FailCreateAccess'
      summary: Add Access User to Activity.
      tags:
      - Access
  /{username}/activities/{activity_name}/remove:
    delete:
      consumes:
      - application/json
      description: remove access user from activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessRemoveAccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccessOwner'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.FailDeleteAccess'
      summary: Remove Access User from Activity.
      tags:
      - Access
  /{username}/activities/{activity_name}/tasks:
    get:
      consumes:
      - application/json
      description: get all task in an activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ActivityNotFound'
      summary: Get All Task in an Activity.
      tags:
      - Task
    post:
      consumes:
      - application/json
      description: create task of an activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: JSON
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.CreateTask'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SuccessCreateTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ActivityNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.FailCreateTask'
      summary: Create Task of an Activity.
      tags:
      - Task
  /{username}/activities/{activity_name}/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: delete a task in an activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: ID task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TaskDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.FailUpdateTask'
      summary: Delete a Task in an Activity.
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: get a task in an activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: ID task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.TaskNotFound'
      summary: Get a Task in an Activity.
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: update a task in an activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: ID task
        in: path
        name: id
        required: true
        type: string
      - description: JSON
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.CreateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TaskUpdated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.FailUpdateTask'
      summary: Update a Task in an Activity.
      tags:
      - Task
  /{username}/activities/{activity_name}/tasks/{id}/complete:
    delete:
      consumes:
      - application/json
      description: undo a completed task in an activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: ID task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TaskUndo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.TaskNotFound'
      summary: Undo a Completed Task in an Activity.
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: complete a task in an activity.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Activity Name
        in: path
        name: activity_name
        required: true
        type: string
      - description: ID task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TaskCompleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.NoAccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.TaskNotFound'
      summary: Complete a Task in an Activity.
      tags:
      - Task
  /{username}/activities/archives:
    get:
      consumes:
      - application/json
      description: get all archived activity by user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Activity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.JWTNotFound'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.UserNotFound'
      summary: Get All Archived Activity.
      tags:
      - Activity
  /login:
    post:
      consumes:
      - application/json
      description: login user to get jwt token.
      parameters:
      - description: JSON username and user_pass
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SuccessLoginUser'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.FailCreateUser'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/model.FailCreateUser'
      summary: Login User.
      tags:
      - User
  /register:
    post:
      consumes:
      - application/json
      description: create new user with username, user_email. user_pass.
      parameters:
      - description: JSON username, user_email, and user_pass
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CreateUser'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.FailCreateUser'
      summary: Create/Register New User.
      tags:
      - User
schemes:
- http
swagger: "2.0"
